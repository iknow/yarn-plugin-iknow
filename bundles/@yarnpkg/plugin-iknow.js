/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-iknow",
factory: function (require) {
var plugin=(()=>{var u=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var N=Object.prototype.hasOwnProperty;var l=(s=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(s,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):s)(function(s){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+s+'" is not supported')});var S=(s,t)=>{for(var r in t)u(s,r,{get:t[r],enumerable:!0})},v=(s,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of k(t))!N.call(s,o)&&o!==r&&u(s,o,{get:()=>t[o],enumerable:!(n=w(t,o))||n.enumerable});return s};var E=s=>v(u({},"__esModule",{value:!0}),s);var R={};S(R,{default:()=>M});var p=l("@yarnpkg/cli"),e=l("@yarnpkg/core"),h=l("@yarnpkg/plugin-essentials"),y=/[0-9]-canary-/,c=class extends p.BaseCommand{async execute(){let t=await e.Configuration.find(this.context.cwd,this.context.plugins),{project:r}=await e.Project.find(t,this.context.cwd);return(await e.StreamReport.start({configuration:t,stdout:this.context.stdout},async o=>{for(let a of r.workspaces){let x=`package.json for ${e.structUtils.prettyWorkspace(t,a)} contains `,f=m=>{for(let g of m)y.test(g.range)&&o.reportError(e.MessageName.UNNAMED,`${x}${e.structUtils.prettyDescriptor(t,g)}`)};f(a.manifest.dependencies.values()),f(a.manifest.devDependencies.values())}for(let a of r.originalPackages.values())y.test(a.reference)&&o.reportError(e.MessageName.UNNAMED,`yarn.lock contains ${e.structUtils.prettyLocator(t,a)}`)})).exitCode()}};c.paths=[["check-canary"]];var i=class extends p.BaseCommand{async execute(){let t=await e.Configuration.find(this.context.cwd,this.context.plugins);return await this.cli.run(["dedupe","--check","--strategy",t.get("dedupeStrategy")])}};i.paths=[["check-dupes"]];var d=class extends p.BaseCommand{async execute(){let t=await e.Configuration.find(this.context.cwd,this.context.plugins);return await this.cli.run(["dedupe","--strategy",t.get("dedupeStrategy")])}};d.paths=[["fix-dupes"]];var A=async({configuration:s,cwd:t},{report:r,cache:n})=>{let{project:o}=await e.Project.find(s,t);await h.dedupeUtils.dedupe(o,{patterns:[],report:r,cache:n,strategy:s.get("dedupeStrategy")})>0&&r.reportError(e.MessageName.UNNAMED,"Run `yarn fix-dupes` to remove duplicates")},U={commands:[c,i,d],hooks:{afterAllInstalled:A},configuration:{dedupeStrategy:{description:"The dedupe strategy to use",type:e.SettingsType.STRING,default:"highest"}}},M=U;return E(R);})();
return plugin;
}
};
